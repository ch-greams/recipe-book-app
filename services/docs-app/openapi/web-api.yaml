openapi: 3.0.3
info:
  title: RecipeBook API
  version: 0.7.0
  description: >
    # About

    Something about this API...

servers:
  - url: http://127.0.0.1:8080/api/v1/
    description: local deployment of web-api

components:
  securitySchemes:
    AccessTokenAuth:
      type: apiKey
      in: cookie
      name: access_token
  schemas:
    # nutrient
    Nutrient:
      type: object
      properties:
        id:
          type: integer
          example: 6
        name:
          type: string
          example: dietary_fiber
        daily_value:
          type: number
          example: 28.0
        unit:
          type: string
          example: g
        nutrient_group:
          type: string
          example: carbohydrates
        parent_name:
          type: string
          example: carbohydrate
    # product
    ProductShort:
      type: object
      properties:
        id:
          type: integer
          example: 321360
        is_recipe:
          type: boolean
          example: false
        name:
          type: string
          example: Tomatoes, grape, raw
        brand:
          type: string
          example: ""
        is_private:
          type: boolean
          example: false
        created_at:
          type: string
          example: "2022-11-04T13:29:03.400873Z"
        updated_at:
          type: string
          example: "2022-11-04T13:29:03.400873Z"
    DeleteProductPayload:
      type: object
      properties:
        id:
          type: integer
          example: 1
    # custom_unit
    CustomUnit:
      type: object
      properties:
        name:
          type: string
          example: medium
        amount:
          type: number
          example: 123.0
        unit:
          type: string
          example: g
        product_id:
          type: integer
          example: 3
    CreateCustomUnitPayload:
      type: object
      properties:
        name:
          type: string
          example: medium
        amount:
          type: number
          example: 123.0
        unit:
          type: string
          example: g
    # food
    Food:
      type: object
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: Tomato
        brand:
          type: string
        description:
          type: string
        density:
          type: number
          example: 1.0
        serving_size:
          type: number
          example: 100.0
        nutrients:
          type: object
          additionalProperties:
            type: number
          example:
            protein: 0.9
            dietary_fiber: 1.2
            energy: 18.0
            carbohydrate: 3.9
            sugars: 2.6
            fat: 0.2
        custom_units:
          type: array
          items:
            $ref: "#/components/schemas/CustomUnit"
        is_private:
          type: boolean
          example: false
        created_at:
          type: string
          example: "2022-06-27T01:41:41.850918Z"
        updated_at:
          type: string
          example: "2022-06-27T01:41:41.850934Z"
    CreateFoodPayload:
      type: object
      properties:
        name:
          type: string
          example: Tomato
        brand:
          type: string
        description:
          type: string
        density:
          type: number
          example: 1.0
        serving_size:
          type: number
          example: 100.0
        nutrients:
          type: object
          additionalProperties:
            type: number
          example:
            protein: 0.9
            dietary_fiber: 1.2
            energy: 18.0
            carbohydrate: 3.9
            sugars: 2.6
            fat: 0.2
        custom_units:
          type: array
          items:
            $ref: "#/components/schemas/CreateCustomUnitPayload"
        is_private:
          type: boolean
          example: false
    UpdateFoodPayload:
      type: object
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: Tomato
        brand:
          type: string
        description:
          type: string
        density:
          type: number
          example: 1.0
        serving_size:
          type: number
          example: 100.0
        nutrients:
          type: object
          additionalProperties:
            type: number
          example:
            protein: 0.9
            dietary_fiber: 1.2
            energy: 18.0
            carbohydrate: 3.9
            sugars: 2.6
            fat: 0.2
        custom_units:
          type: array
          items:
            $ref: "#/components/schemas/CustomUnit"
        is_private:
          type: boolean
          example: false
    # ingredient
    IngredientProductDetailsWithNutrients:
      type: object
      properties:
        ingredient_id:
          type: integer
          example: 6
        product_id:
          type: integer
          example: 4
        amount:
          type: number
          example: 125.0
        unit:
          type: string
          example: g
        is_recipe:
          type: boolean
          example: false
        name:
          type: string
          example: Ground Beef
        density:
          type: number
          example: 1.0
        nutrients:
          type: object
          additionalProperties:
            type: number
          example:
            protein: 14.0
            energy: 332.0
            sugars: 0
            carbohydrate: 0
            fat: 30.0
    IngredientDetails:
      type: object
      properties:
        id:
          type: integer
          example: 6
        product_id:
          type: integer
          example: 4
        products:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/IngredientProductDetailsWithNutrients"
    IngredientProductPayload:
      type: object
      properties:
        product_id:
          type: integer
          example: 4
        amount:
          type: number
          example: 125.0
        unit:
          type: string
          example: g
    CreateIngredientPayload:
      type: object
      properties:
        id:
          type: integer
          description: should store a temporary id
          example: -6
        product_id:
          type: integer
          example: 4
        products:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/IngredientProductPayload"
    UpdateIngredientPayload:
      type: object
      properties:
        id:
          type: integer
          example: 6
        product_id:
          type: integer
          example: 4
        products:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/IngredientProductPayload"
    # direction
    DirectionPartDetails:
      type: object
      properties:
        step_number:
          type: integer
          example: 1
        direction_part_type:
          type: string
          enum:
            - ingredient
            - note
            - warning
            - tip
          example: tip
        comment_text:
          type: string
          example: You can flip it after 8 min, but not necessary
        ingredient_id:
          type: integer
        ingredient_amount:
          type: number
    DirectionDetails:
      type: object
      properties:
        id:
          type: integer
          example: 4
        step_number:
          type: integer
          example: 1
        name:
          type: string
          example: Bake the patty
        temperature_value:
          type: number
          example: 82.22222
        temperature_unit:
          type: string
          example: F
        duration_value:
          type: integer
          example: 900
        duration_unit:
          type: string
          example: min
        steps:
          type: array
          items:
            $ref: "#/components/schemas/DirectionPartDetails"
    DirectionPartPayload:
      type: object
      properties:
        step_number:
          type: integer
          example: 1
        direction_part_type:
          type: string
          enum:
            - ingredient
            - note
            - warning
            - tip
          example: tip
        comment_text:
          type: string
          example: You can flip it after 8 min, but not necessary
        ingredient_id:
          type: integer
        ingredient_amount:
          type: number
    CreateDirectionPayload:
      type: object
      properties:
        step_number:
          type: integer
          example: 1
        name:
          type: string
          example: Bake the patty
        temperature_value:
          type: number
          example: 82.22222
        temperature_unit:
          type: string
          example: F
        duration_value:
          type: integer
          example: 900
        duration_unit:
          type: string
          example: min
        steps:
          type: array
          items:
            $ref: "#/components/schemas/DirectionPartPayload"
    UpdateDirectionPayload:
      type: object
      properties:
        id:
          type: integer
          example: 6
        step_number:
          type: integer
          example: 1
        name:
          type: string
          example: Bake the patty
        temperature_value:
          type: number
          example: 82.22222
        temperature_unit:
          type: string
          example: F
        duration_value:
          type: integer
          example: 900
        duration_unit:
          type: string
          example: min
        steps:
          type: array
          items:
            $ref: "#/components/schemas/DirectionPartPayload"
    # recipe
    Recipe:
      type: object
      properties:
        id:
          type: integer
          example: 6
        name:
          type: string
          example: Hamburger
        brand:
          type: string
          example: Homemade
        description:
          type: string
        density:
          type: number
          example: 1.0
        serving_size:
          type: number
          example: 479.7476
        custom_units:
          type: array
          items:
            $ref: "#/components/schemas/CustomUnit"
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/IngredientDetails"
        directions:
          type: array
          items:
            $ref: "#/components/schemas/DirectionDetails"
        is_private:
          type: boolean
          example: false
        created_at:
          type: string
          example: "2022-06-27T01:41:41.850918Z"
        updated_at:
          type: string
          example: "2022-06-27T01:41:41.850934Z"
    CreateRecipePayload:
      type: object
      properties:
        name:
          type: string
          example: Hamburger
        brand:
          type: string
          example: Homemade
        description:
          type: string
        density:
          type: number
          example: 1.0
        serving_size:
          type: number
          example: 479.7476
        custom_units:
          type: array
          items:
            $ref: "#/components/schemas/CreateCustomUnitPayload"
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/CreateIngredientPayload"
        directions:
          type: array
          items:
            $ref: "#/components/schemas/CreateDirectionPayload"
        is_private:
          type: boolean
          example: false
    UpdateRecipePayload:
      type: object
      properties:
        id:
          type: integer
          example: 6
        name:
          type: string
          example: Hamburger
        brand:
          type: string
          example: Homemade
        description:
          type: string
        density:
          type: number
          example: 1.0
        serving_size:
          type: number
          example: 479.7476
        custom_units:
          type: array
          items:
            $ref: "#/components/schemas/CustomUnit"
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/UpdateIngredientPayload"
        directions:
          type: array
          items:
            $ref: "#/components/schemas/UpdateDirectionPayload"
        is_private:
          type: boolean
          example: false
    # journal
    JournalGroup:
      type: object
      properties:
        ui_index:
          type: integer
          example: 2
        name:
          type: string
          example: lunch
        user_id:
          type: integer
          example: 1
    JournalEntry:
      type: object
      properties:
        id:
          type: integer
          example: 2
        user_id:
          type: integer
          example: 1
        entry_date:
          type: string
          example: "2022-11-04"
        entry_time:
          type: string
          example: "13:29:03"
        product_id:
          type: integer
          example: 6
        amount:
          type: number
          example: 450.5
        unit:
          type: string
          example: g
        journal_group_ui_index:
          type: integer
          example: 2
    CreateJournalEntryPayload:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        entry_date:
          type: string
          example: "2022-11-04"
        entry_time:
          type: string
          example: "13:29:03"
        product_id:
          type: integer
          example: 6
        amount:
          type: number
          example: 450.5
        unit:
          type: string
          example: g
        journal_group_ui_index:
          type: integer
          example: 2
    DeleteJournalEntryPayload:
      type: object
      properties:
        id:
          type: integer
          example: 2
    JournalEntryDetailed:
      type: object
      properties:
        id:
          type: integer
          example: 2
        user_id:
          type: integer
          example: 1
        entry_date:
          type: string
          example: "2022-11-04"
        entry_time:
          type: string
          example: "13:29:03"
        product_id:
          type: integer
          example: 6
        product_name:
          type: string
          example: Hamburger
        product_density:
          type: number
          example: 0.9
        amount:
          type: number
          example: 450.5
        unit:
          type: string
          example: g
        journal_group_ui_index:
          type: integer
          example: 2
        nutrients:
          type: object
          additionalProperties:
            type: number
          example:
            protein: 0.9
            dietary_fiber: 1.2
            energy: 18.0
            carbohydrate: 3.9
            sugars: 2.6
            fat: 0.2
        custom_units:
          type: array
          items:
            $ref: "#/components/schemas/CustomUnit"
    # user_nutrient
    UserNutrient:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        nutrient_id:
          type: integer
          example: 2
        is_featured:
          type: boolean
          example: true
        daily_target_amount:
          type: number
          example: 12.3
        ui_index:
          type: integer
          example: 7
    UserNutrientDetailed:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        nutrient_id:
          type: integer
          example: 45
        is_featured:
          type: boolean
          example: true
        daily_target_amount:
          type: number
          example: 12.3
        ui_index:
          type: integer
          example: 7
        nutrient_name:
          type: string
          example: vitamin_b3
        nutrient_daily_value:
          type: number
          example: 16
        nutrient_unit:
          type: string
          example: mg
        nutrient_group:
          type: string
          example: vitamins
        nutrient_parent_name:
          type: string
          example: null
    DeleteUserNutrientPayload:
      type: object
      properties:
        id:
          type: integer
          example: 2
tags:
  - name: meta
    description: All `meta` related endpoints
  - name: product
    description: All `product` related endpoints
  - name: food
    description: All `food` related endpoints
  - name: recipe
    description: All `recipe` related endpoints
  - name: journal
    description: All `journal` related endpoints

x-tagGroups:
  - name: General
    tags:
      - meta
      - product
      - food
      - recipe
      - journal

paths:
  /meta/nutrients:
    get:
      tags:
        - meta
      summary: Get all nutrients
      security: []
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Nutrient"

  /product:
    get:
      tags:
        - product
      summary: Find products
      security: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 100
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            example: 0
        - name: is_recipe
          in: query
          required: false
          schema:
            type: boolean
            example: false
        - name: filter
          in: query
          required: false
          schema:
            type: string
            example: Tomato

      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductShort"
        "404":
          description: Not Found

  /product/created:
    get:
      tags:
        - product
      summary: Find products created by user
      security: 
        - AccessTokenAuth: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 100
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            example: 0
        - name: is_recipe
          in: query
          required: false
          schema:
            type: boolean
            example: false
        - name: filter
          in: query
          required: false
          schema:
            type: string
            example: Tomato

      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductShort"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /product/favorite:
    get:
      tags:
        - product
      summary: Find favorite products
      security: 
        - AccessTokenAuth: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 100
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            example: 0
        - name: is_recipe
          in: query
          required: false
          schema:
            type: boolean
            example: false
        - name: filter
          in: query
          required: false
          schema:
            type: string
            example: Tomato

      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductShort"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /product/favorite/delete:
    post:
      tags:
        - product
      summary: Delete a favorite product by id
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeleteProductPayload"
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /product/delete:
    post:
      tags:
        - product
      summary: Delete a product by id
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeleteProductPayload"
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /food/{id}:
    get:
      tags:
        - food
      summary: Find a food by id
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Food"
        "404":
          description: Not Found

  /food/create:
    post:
      tags:
        - food
      summary: Create a food
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/CreateFoodPayload"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Food"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /food/update:
    post:
      tags:
        - food
      summary: Update a food
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UpdateFoodPayload"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Food"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /recipe/{id}:
    get:
      tags:
        - recipe
      summary: Find a recipe by id
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 6
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Recipe"
        "404":
          description: Not Found

  /recipe/create:
    post:
      tags:
        - recipe
      summary: Create a recipe
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/CreateRecipePayload"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Recipe"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /recipe/update:
    post:
      tags:
        - recipe
      summary: Update a recipe
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UpdateRecipePayload"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Recipe"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /journal/groups:
    get:
      tags:
        - journal
      summary: Get all journal groups
      security: 
        - AccessTokenAuth: []
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JournalGroup"
              example:
                - ui_index: 1
                  name: breakfast
                  user_id: 1
                - ui_index: 2
                  name: lunch
                  user_id: 1
                - ui_index: 3
                  name: dinner
                  user_id: 1
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /journal/groups/update:
    post:
      tags:
        - journal
      summary: Update all journal groups
      description: This request will replace all existing journal groups for a user with the ones in this payload
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JournalGroup"
            example:
              - ui_index: 1
                name: breakfast
                user_id: 1
              - ui_index: 2
                name: lunch
                user_id: 1
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /journal/entry:
    get:
      tags:
        - journal
      summary: Get all journal entries
      security: 
        - AccessTokenAuth: []
      parameters:
        - name: entry_date
          in: query
          required: true
          schema:
            type: string
            example: "2022-11-04"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JournalEntryDetailed"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /journal/entry/create:
    post:
      tags:
        - journal
      summary: Create a journal entry
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/CreateJournalEntryPayload"
      responses:
        "201":
          description: Created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/JournalEntryDetailed"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /journal/entry/update:
    post:
      tags:
        - journal
      summary: Update a journal entry
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/JournalEntry"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/JournalEntry"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /journal/entry/delete:
    post:
      tags:
        - journal
      summary: Delete a journal entry
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeleteJournalEntryPayload"
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /journal/nutrients:
    get:
      tags:
        - journal
      summary: Get all user nutrients
      security: 
        - AccessTokenAuth: []
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNutrientDetailed"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /journal/nutrient/upsert:
    post:
      tags:
        - journal
      summary: Upsert a user nutrient
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UserNutrient"
      responses:
        "201":
          description: Created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserNutrientDetailed"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

  /journal/nutrient/delete:
    post:
      tags:
        - journal
      summary: Delete a user nutrient
      security: 
        - AccessTokenAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeleteUserNutrientPayload"
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
